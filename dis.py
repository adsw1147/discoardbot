import requests
from datetime import datetime
import pytz

def get_earthquake_data():
    # ‡πÉ‡∏ä‡πâ USGS API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    url = "https://earthquake.usgs.gov/fdsnws/event/1/query"
    params = {
        "format": "geojson",  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö GeoJSON
        "limit": 1,  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        "orderby": "time",  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if data['features']:
            earthquake_info = data['features'][0]['properties']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if 'coordinates' in data['features'][0]['geometry']:
                latitude = data['features'][0]['geometry']['coordinates'][1]
                longitude = data['features'][0]['geometry']['coordinates'][0]
            else:
                latitude = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                longitude = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (timestamp) ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (UTC+7)
            timestamp = earthquake_info['time'] / 1000  # Convert milliseconds to seconds
            utc_time = datetime.utcfromtimestamp(timestamp).replace(tzinfo=pytz.utc)
            thailand_time = utc_time.astimezone(pytz.timezone('Asia/Bangkok'))

            return {
                "date": thailand_time.strftime('%Y-%m-%d'),  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                "time": thailand_time.strftime('%H:%M:%S'),  # ‡πÄ‡∏ß‡∏•‡∏≤
                "magnitude": earthquake_info['mag'],
                "latitude": latitude,
                "longitude": longitude,
                "location": earthquake_info['place'],
            }
        else:
            print("No earthquake data available.")
            return None

    except requests.RequestException as e:
        print(f"Error fetching earthquake data: {e}")
        return None

def send_discord_alert(earthquake_info, webhook_url):
    message = (
        f"\n**‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!**\n"
        f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {earthquake_info['date']}\n"
        f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {earthquake_info['time']}\n"
        f"üåç ‡∏Ç‡∏ô‡∏≤‡∏î: {earthquake_info['magnitude']} ‡∏£‡∏¥‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå\n"
        f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {earthquake_info['latitude']}, {earthquake_info['longitude']}\n"
        f"üè† ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {earthquake_info['location']}"
    )
    data = {"content": message}
    try:
        response = requests.post(webhook_url, json=data, timeout=10)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"Error sending Discord alert: {e}")

if __name__ == "__main__":
    DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1355214995771621457/PSC4Yv3mAhxwcTUvkkYDB8nQp7HEItkZaZp9nA4t_ZZ-NC3_sjjq-JxTGAusd-BmUSFn"
    earthquake_data = get_earthquake_data()
    if earthquake_data:
        send_discord_alert(earthquake_data, DISCORD_WEBHOOK_URL)
    else:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß")
